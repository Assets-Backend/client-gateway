# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClientIds {
  mongo_id: String!
  client_id: Float!
}

type AuthClient {
  id: ID!
  user_id: Int!
  name: String!
  last_name: String!
  email: String!
  phone: String
  roles: [user_types!]!
  gender: gender_options!
  current_client: ClientIds
  deleted_at: String
  last_login: String
  updated_at: String!
  created_at: String!
}

"""
Enumeración que representa los diferentes tipos de usuarios del sistema: `client` (coordinadores) y "professional` (profesionales).
"""
enum user_types {
  client
  professional
  clientAdmin
}

"""Enumeración que representa el genero del usuario."""
enum gender_options {
  m
  f
  M
  F
}

type ClientResponse {
  token: String!
  user: AuthClient!
}

type AuthProfessional {
  id: ID!
  user_id: Int!
  name: String!
  last_name: String!
  email: String!
  phone: String
  roles: [user_types!]!
  gender: gender_options!
  deleted_at: String
  last_login: String
  updated_at: String!
  created_at: String!
}

type ProfessionalResponse {
  token: String!
  user: AuthProfessional!
}

type Client {
  client_id: Int!
  client_fk: Int
  mongo_id: String!
  name: String!
  last_name: String!
  profile: String!
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Patient {
  patient_id: Int!
  client_fk: Int!
  company_fk: Int!
  updated_by: Int!
  name: String!
  last_name: String!
  healthcare_provider: String
  gender: gender_options!
  age: Int
  phone: String
  note: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Company {
  company_id: Int!
  client_fk: Int!
  updated_by: Int!
  name: String!
  cuit: String
  note: String
  deleted_at: String
  updated_at: String!
  created_at: String!
  totalPatients: Int!
  totalOrders: Int!
}

type Treatment {
  treatment_id: Int!
  client_fk: Int!
  updated_by: Int!
  name: String!
  abbreviation: String!
  description: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type CompanyHasTreatment {
  client_fk: Int!
  company_fk: Int!
  treatment_fk: Int!
  value: Float!
  updated_by: Int!
  updated_at: String!
  created_at: String!
}

type TreatmentHasProfessional {
  client_fk: Int!
  company_fk: Int!
  treatment_fk: Int!
  professional_fk: Int!
  value: Float!
  updated_by: Int!
  updated_at: String!
  created_at: String!
}

type Order {
  order_id: Int!
  client_fk: Int!
  updated_by: Int!
  patient_fk: Int!
  company_fk: Int!
  treatment_fk: Int!
  frequency: Int!
  diagnosis: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type OrderDetail {
  detail_id: Int!
  order_fk: Int!
  client_fk: Int!
  professional_fk: Int
  updated_by: Int!
  start_date: String!
  finish_date: String!
  total_sessions: Int!
  sessions: Int!
  coinsurance: Int!
  value: Int!
  cost: Int!
  started_at: String
  finished_at: String
  requirements: String
  updated_at: String!
  created_at: String!
}

type Claim {
  claim_id: Int!
  detail_fk: Int!
  client_fk: Int!
  updated_by: Int!
  cause: String!
  urgency: urgency_options!
  reported_date: String!
  deleted_at: String
  updated_at: String!
  created_at: String!
}

"""Enumeración que representa los tipos de emergencia para el reclamo."""
enum urgency_options {
  high
  medium
  low
}

type Professional {
  professional_id: Int!
  name: String!
  last_name: String!
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Query {
  revalidateTokenClient: ClientResponse!
  revalidateTokenProfessional: ProfessionalResponse!
  Client: Client!
  findUsers(offset: Int = 0, limit: Int = 10): [Client!]!
  findPatient(patient_id: Int!): Patient!
  findPatientsByCompany(company_fk: Int!, offset: Int = 0, limit: Int = 10): [Patient!]!
  findPatients(offset: Int = 0, limit: Int = 10): [Patient!]!
  findCompany(company_id: Int!): Company!
  findCompanies(offset: Int = 0, limit: Int = 10): [Company!]!
  findTreatment(treatment_id: Int!): Treatment!
  findTreatments(offset: Int = 0, limit: Int = 10): [Treatment!]!
  findCompanyHasTreatment(compositeIdCompanyInput: CompositeIdCompanyInput!): CompanyHasTreatment!
  findCompanyHasTreatments(offset: Int = 0, limit: Int = 10): [CompanyHasTreatment!]!
  findTreatmentHasProfessional(compositeIdTreatmentInput: CompositeIdTreatmentInput!): TreatmentHasProfessional!
  findTreatmentHasProfessionals(offset: Int = 0, limit: Int = 10): [TreatmentHasProfessional!]!
  findOrdersByCompany(company_fk: Int!, offset: Int = 0, limit: Int = 10): [Order!]!
  findOrdersByPatient(patient_fk: Int!, offset: Int = 0, limit: Int = 10): [Order!]!
  findOrders(offset: Int = 0, limit: Int = 10): [Order!]!
  findDetail(detail_id: Int!): OrderDetail!
  findDetailsByOrder(order_fk: Int!, offset: Int = 0, limit: Int = 10): [OrderDetail!]!
  findClaim(claim_id: Int!): Claim!
  findClaimsByDetail(detail_fk: Int!, offset: Int = 0, limit: Int = 10): [Claim!]!
  findClaims(offset: Int = 0, limit: Int = 10): [Claim!]!
  Professional: Professional!
}

input CompositeIdCompanyInput {
  company_fk: Int!
  treatment_fk: Int!
}

input CompositeIdTreatmentInput {
  company_fk: Int!
  treatment_fk: Int!
  professional_fk: Int!
}

type Mutation {
  LoginClient(loginClientInput: LoginClientInput!): ClientResponse!
  SignupProfessional(signupProfessionalInput: SignupProfessionalInput!): ProfessionalResponse!
  LoginProfessional(loginProfessionalInput: LoginProfessionalInput!): ProfessionalResponse!
  updateUser(updateClientInput: UpdateClientInput!): Client!
  deleteUser(user_id: Int!): Client!
  createPatient(createPatientInput: CreatePatientInput!): Patient!
  updatePatient(updatePatientInput: UpdatePatientInput!): Patient!
  deletePatient(deletePatientInput: DeletePatientInput!): Patient!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  deleteCompany(deleteCompanyInput: DeleteCompanyInput!): Company!
  createTreatment(createTreatmentInput: CreateTreatmentInput!): Treatment!
  updateTreatment(updateTreatmentInput: UpdateTreatmentInput!): Treatment!
  deleteTreatment(deleteTreatmentInput: DeleteTreatmentInput!): Treatment!
  createCompanyHasTreatment(createCompanyHasTreatmentInput: CreateCompanyHasTreatmentInput!): CompanyHasTreatment!
  updateCompanyHasTreatment(updateCompanyHasTreatmentInput: UpdateCompanyHasTreatmentInput!): CompanyHasTreatment!
  deleteCompanyHasTreatment(compositeIdCompanyInput: CompositeIdCompanyInput!): CompanyHasTreatment!
  updateTreatmentHasProfessional(updateTreatmentHasProfessionalInput: UpdateTreatmentHasProfessionalInput!): TreatmentHasProfessional!
  deleteTreatmentHasProfessional(compositeIdTreatmentInput: CompositeIdTreatmentInput!): TreatmentHasProfessional!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  deleteOrder(deleteOrderInput: DeleteOrderInput!): Order!
  createDetail(createDetailInput: CreateDetailInput!): OrderDetail!
  updateDetail(updateDetailInput: UpdateDetailInput!): OrderDetail!
  finalizeDetail(deleteDetailInput: DeleteDetailInput!): OrderDetail!
  acceptDetail(detail_id: Int!): OrderDetail!
  createClaim(createClaimInput: CreateClaimInput!): Claim!
  updateClaim(updateClaimInput: UpdateClaimInput!): Claim!
  deleteClaim(deleteClaimInput: DeleteClaimInput!): Claim!
  updateProfessional(updateProfessionalInput: UpdateProfessionalInput!): Professional!
}

input LoginClientInput {
  email: String
  phone: String
  password: String!
}

input SignupProfessionalInput {
  name: String!
  last_name: String!
  email: String!
  phone: String
  password: String!
  gender: gender_options!
}

input LoginProfessionalInput {
  email: String
  phone: String
  password: String!
}

input UpdateClientInput {
  name: String
  last_name: String
  profile: String
}

input CreatePatientInput {
  company_fk: Int!
  name: String!
  last_name: String!
  healthcare_provider: String
  gender: gender_options!
  age: Int
  phone: String
  note: String
}

input UpdatePatientInput {
  company_fk: Int
  name: String
  last_name: String
  healthcare_provider: String
  gender: gender_options
  age: Int
  phone: String
  note: String
  patient_id: Int!
}

input DeletePatientInput {
  patient_id: Int!
}

input CreateCompanyInput {
  name: String!
  cuit: String
  note: String
}

input UpdateCompanyInput {
  name: String
  cuit: String
  note: String
  company_id: Int!
}

input DeleteCompanyInput {
  company_id: Int!
}

input CreateTreatmentInput {
  name: String!
  abbreviation: String!
  description: String
}

input UpdateTreatmentInput {
  name: String
  abbreviation: String
  description: String
  treatment_id: Int!
}

input DeleteTreatmentInput {
  treatment_id: Int!
}

input CreateCompanyHasTreatmentInput {
  company_fk: Int!
  treatment_fk: Int!
  value: Float!
}

input UpdateCompanyHasTreatmentInput {
  company_fk: Int!
  treatment_fk: Int!
  value: Float
}

input UpdateTreatmentHasProfessionalInput {
  company_fk: Int!
  treatment_fk: Int!
  professional_fk: Int!
  value: Float
}

input CreateOrderInput {
  company_fk: Int!
  patient_fk: Int!
  treatment_fk: Int!
  frequency: Int!
  diagnosis: String
}

input UpdateOrderInput {
  company_fk: Int
  patient_fk: Int
  treatment_fk: Int
  frequency: Int
  diagnosis: String
  order_id: Int!
}

input DeleteOrderInput {
  order_id: Int!
}

input CreateDetailInput {
  order_fk: Int!
  professional_fk: Int
  start_date: DateTime!
  finish_date: DateTime!
  total_sessions: Int
  sessions: Int
  coinsurance: Int
  value: Int
  cost: Int
  started_at: DateTime
  finished_at: DateTime
  requirements: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input UpdateDetailInput {
  order_fk: Int
  professional_fk: Int
  start_date: DateTime
  finish_date: DateTime
  total_sessions: Int
  sessions: Int
  coinsurance: Int
  value: Int
  cost: Int
  started_at: DateTime
  finished_at: DateTime
  requirements: String
  detail_id: Int!
}

input DeleteDetailInput {
  detail_id: Int!
}

input CreateClaimInput {
  detail_fk: Int!
  cause: String!
  urgency: urgency_options!
  reported_date: DateTime!
}

input UpdateClaimInput {
  detail_fk: Int
  cause: String
  urgency: urgency_options
  reported_date: DateTime
  claim_id: Int!
}

input DeleteClaimInput {
  claim_id: Int!
}

input UpdateProfessionalInput {
  name: String
  last_name: String
}