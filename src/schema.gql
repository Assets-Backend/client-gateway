# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClientIds {
  mongo_id: String!
  client_id: Float!
}

type User {
  id: ID!
  user_id: Int!
  email: String!
  phone: String
  roles: [user_types!]!
  gender: gender_options!
  current_client: ClientIds
  deleted_at: String
  last_login: String
  updated_at: String!
  created_at: String!
}

"""
Enumeración que representa los diferentes tipos de usuarios del sistema: `client` (coordinadores) y "professional` (profesionales).
"""
enum user_types {
  client
  professional
  clientAdmin
}

"""Enumeración que representa el genero del usuario."""
enum gender_options {
  m
  f
  M
  F
}

type AuthResponse {
  token: String!
  user: User!
}

type Client {
  client_id: Int!
  client_fk: Int
  mongo_id: String!
  name: String!
  last_name: String!
  profile: String!
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Patient {
  patient_id: Int!
  client_fk: Int!
  company_fk: Int!
  updated_by: Int!
  name: String!
  last_name: String!
  healthcare_provider: String
  gender: gender_options!
  age: Int
  phone: String
  note: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Company {
  company_id: Int!
  client_fk: Int!
  updated_by: Int!
  name: String!
  cuit: String
  note: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type Treatment {
  treatment_id: Int!
  client_fk: Int!
  updated_by: Int!
  name: String!
  abbreviation: String!
  description: String
  deleted_at: String
  updated_at: String!
  created_at: String!
}

type CompanyHasTreatment {
  client_fk: Int!
  company_fk: Int!
  treatment_fk: Int!
  value: Float!
  updated_by: Int!
  updated_at: String!
  created_at: String!
}

type Query {
  revalidateToken: AuthResponse!
  Client: Client!
  findUsers(offset: Int = 0, limit: Int = 10): [Client!]!
  findPatient(patient_id: Int!): Patient!
  findPatientsByCompany(company_fk: Int!, offset: Int = 0, limit: Int = 10): [Patient!]!
  findPatients(offset: Int = 0, limit: Int = 10): [Patient!]!
  findCompany(company_id: Int!): Company!
  findCompanies(offset: Int = 0, limit: Int = 10): [Company!]!
  findTreatment(treatment_id: Int!): Treatment!
  findTreatments(offset: Int = 0, limit: Int = 10): [Treatment!]!
  findCompanyHasTreatment(compositeIdInput: CompositeIdInput!): CompanyHasTreatment!
  findCompanyHasTreatments(offset: Int = 0, limit: Int = 10): [CompanyHasTreatment!]!
}

input CompositeIdInput {
  company_fk: Int!
  treatment_fk: Int!
}

type Mutation {
  Login(loginInput: LoginInput!): AuthResponse!
  SignupClient(signupInput: SignupInput!): AuthResponse!
  SignupProfessional(signupInput: SignupInput!): AuthResponse!
  updateUser(updateClientInput: UpdateClientInput!): Client!
  deleteUser(user_id: Int!): Client!
  createPatient(createPatientInput: CreatePatientInput!): Patient!
  updatePatient(updatePatientInput: UpdatePatientInput!): Patient!
  deletePatient(deletePatientInput: DeletePatientInput!): Patient!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  deleteCompany(deleteCompanyInput: DeleteCompanyInput!): Company!
  createTreatment(createTreatmentInput: CreateTreatmentInput!): Treatment!
  updateTreatment(updateTreatmentInput: UpdateTreatmentInput!): Treatment!
  deleteTreatment(deleteTreatmentInput: DeleteTreatmentInput!): Treatment!
  createCompanyHasTreatment(createCompanyHasTreatmentInput: CreateCompanyHasTreatmentInput!): CompanyHasTreatment!
  updateCompanyHasTreatment(updateCompanyHasTreatmentInput: UpdateCompanyHasTreatmentInput!): CompanyHasTreatment!
  deleteCompanyHasTreatment(compositeIdInput: CompositeIdInput!): CompanyHasTreatment!
}

input LoginInput {
  email: String
  phone: String
  password: String!
}

input SignupInput {
  user_id: Int!
  name: String!
  last_name: String!
  email: String!
  phone: String
  password: String!
  gender: gender_options!
}

input UpdateClientInput {
  name: String
  last_name: String
  profile: String
}

input CreatePatientInput {
  company_fk: Int!
  name: String!
  last_name: String!
  healthcare_provider: String
  gender: gender_options!
  age: Int
  phone: String
  note: String
}

input UpdatePatientInput {
  company_fk: Int
  name: String
  last_name: String
  healthcare_provider: String
  gender: gender_options
  age: Int
  phone: String
  note: String
  patient_id: Int!
}

input DeletePatientInput {
  patient_id: Int!
}

input CreateCompanyInput {
  name: String!
  cuit: String
  note: String
}

input UpdateCompanyInput {
  name: String
  cuit: String
  note: String
  company_id: Int!
}

input DeleteCompanyInput {
  company_id: Int!
}

input CreateTreatmentInput {
  name: String!
  abbreviation: String!
  description: String
}

input UpdateTreatmentInput {
  name: String
  abbreviation: String
  description: String
  treatment_id: Int!
}

input DeleteTreatmentInput {
  treatment_id: Int!
}

input CreateCompanyHasTreatmentInput {
  company_fk: Int!
  treatment_fk: Int!
  value: Float!
}

input UpdateCompanyHasTreatmentInput {
  company_fk: Int!
  treatment_fk: Int!
  value: Float
}